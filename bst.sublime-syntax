%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: LaTeX Bibliographic Style (bst)
comment: |
  Grammer based on
    implemention of bibÂ­tex8bit, available at https://ctan.org/tex-archive/biblio/bibtex/8-bit,
    and
    TameTheBeast, available at https://ctan.org/pkg/tamethebeast.
file_extensions:
  - bst
scope: text.tex.bst
contexts:
  prototype:
    - include: comments

  main:
    - match: '"'
      push: string
    - match: '\#(\-?)[0-9]+'
      scope: constant.numeric.tex
    - match: \b(ENTRY|EXECUTE|FUNCTION|INTEGERS|ITERATE|MACRO|READ|REVERSE|SORT|STRINGS|COMMENT|PREAMBLE|STRING)\b
      scope: keyword.control.command.tex
    - match: (=|>|<|\+|\-|\*|:=)
      scope: keyword.operator.tex
    - match: (')
      scope: keyword.operator.varname.tex
    - match: (\$)
      scope: keyword.operator.functioncall.tex
    - match: (\\)(citation|bibdata|bibstyle|@input)\b
      captures:
        0: keyword.control.command.tex
        1: punctuation.definition.backslash.tex
    - match: (\'?)(add\.period|call\.type|change\.case|chr\.to\.int|cite|duplicate|empty|format\.name|if|int\.to\.chr|int\.to\.str|missing|newline|num\.names|pop|preamble|purify|quote|skip|stack|substring|swap|text\.length|text\.prefix|top|type|warning|width|while|width|write)(\$)
      captures:
        0: keyword.control.function.tex
        1: keyword.operator.varname.tex
        3: keyword.operator.functioncall.tex
    - match: (\'?)(sort\.key|entry\.max|global\.max)(\$)
      captures:
        0: keyword.control.command.tex
        1: keyword.operator.varname.tex
        3: keyword.operator.functioncall.tex
    - match: (\'?)(crossref)\b
      captures:
        0: keyword.control.command.tex
        1: keyword.operator.varname.tex
    - match: '\{'
      scope: punctuation.definition.brace.begin.tex
    - match: '\}'
      scope: punctuation.definition.brace.end.tex
    - match: \b[A-Za-z\.0-9]+\b
      scope: variable.other.tex


  string:
    - meta_scope: string.quoted.double.tex
    - meta_include_prototype: false
    - match: '"'
      pop: true

  comments:
    - match: '%.*$\n?'
      scope: comment.line.percentage.tex
